import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns
path=(r"E:\Notes\Pandass\movies.csv\movies.csv")
Df=pd.read_csv(path)
genre_mapping = {'Music': 'Musical'}
Df['genre']=Df['genre'].replace(genre_mapping)
rating_mapping={'X':'NC-17'}
Df['rating']=Df['rating'].replace(rating_mapping)
#print(Df.head())
plt.style.use('ggplot')
plt.rcParams['figure.figsize']=(10, 6)
nDf=Df.isnull().sum()
Df['budget']=Df['budget'].fillna('0')
Df['budget']=Df['budget'].astype('int64')
Df['gross']=Df['gross'].fillna('0')
Df['gross']=Df['gross'].astype('int64')
dtDf=Df.dtypes
#print(dtDf)
Df['released']=Df['released'].astype('str')
Df[['day','counttrry']]=Df['released'].str.split('(', n=1, expand=True)
pd.options.display.max_columns=20
#Df['day'].str.strip().str[::-1]
#Df['year']=Df['day'].str[0:4].str[::-1]

def preprocess_date_string(date_str):
    date_str = re.sub(r'\s+', ' ', date_str.strip())
    # If date string matches a year only, add "-01-01" to make it parsable as a full date
    if re.match(r'^\d{4}$', date_str):
        return  'January 01, ' + date_str
    # If date string matches "Month, Year" or "Month Year", add "1" to make it the first day of that month
    if re.match(r'^[A-Za-z]+\s+\d{4}$', date_str):
        return re.sub(r'(\d{4})$', r'1, \1', date_str)
    # If date string matches "Day Month Year", rearrange it to "Month Day, Year"
    if re.match(r'^\d{1,2} [A-Za-z]+ \d{4}$', date_str):
        parts = date_str.split()
        return f'{parts[1]} {parts[0]}, {parts[2]}'
    return date_str

#formatting dates
Df['day'] = Df['day'].apply(preprocess_date_string)
Df['date_crctd']=pd.to_datetime(Df['day'])
Df['year_crctd']=Df['date_crctd'].dt.year
Df['year_crctd']=Df['year_crctd'].fillna('0')
Df['year_crctd']=Df['year_crctd'].astype('int64')

sDf=((Df.sort_values(by=['gross'],inplace=False,ascending=False).head(30)))
#print(sDf)
plt.figure(1)
plt.scatter(x=Df['budget'],y=Df['gross'])
plt.title('budget vs revenue')
plt.xlabel('budget')
plt.ylabel('gross revenue')

sns.regplot(x='budget',y='gross',data=Df,scatter_kws={"color":"red"},line_kws={"color":"green"})

plt.show(block=False)

corr_mat=Df.corr(numeric_only=True)
#print(corr_mat)
plt.figure(2)
sns.heatmap(corr_mat,annot=True)
plt.xlabel('numeric_columns')
plt.ylabel('numeric_columns')
plt.title('correlation matrix for numeric columns')
plt.show(block=False)

#providing unique number for object tyoe columns to include them also in corr
Df_number=Df.copy()
for col_name in Df_number.columns:
    if (Df_number[col_name].dtype=='object'):
        Df_number[col_name]=Df_number[col_name].astype('category')
        Df_number[col_name]=Df_number[col_name].cat.codes
SDf_number=(Df_number.sort_values(by=['gross'],inplace=False,ascending=False).head(30))
corr_matrix_all=SDf_number.corr(numeric_only=True)
#print(corr_matirx_all)
plt.figure(3)
sns.heatmap(corr_matrix_all,annot=True)
plt.title('corr_matrix for whole data')
plt.xlabel('all')
plt.ylabel('all')


corr_values=corr_matrix_all.unstack()
pd.options.display.max_rows=325
sorted_values=corr_values.sort_values()
highr_corr= [sorted_values[sorted_values>0.5]]
print(highr_corr)

plt.figure(4)
avg_score=Df.groupby('genre')['score'].mean(numeric_only=True).sort_values(ascending=False)
avg_score.plot(kind='bar',xlabel='genre',ylabel='imdb-score',title='genre vs score',figsize=(10, 6))
plt.show(block=False)

plt.figure(5)
rating_based=Df.groupby('rating')['gross'].mean(numeric_only=True).sort_values(ascending=False)
rating_based.plot(kind='bar',xlabel='rating',ylabel='revnue',title='rating vs revenue',figsize=(10, 6))
plt.show(block=False)

year_based = Df.groupby(['year_crctd', 'genre'])['gross'].mean().reset_index()
year_pivot = year_based.pivot(index='year_crctd', columns='genre', values='gross').fillna(0)
year_pivot.plot(kind='bar', stacked=True,  xlabel='year', ylabel='mean revenue', title='mean revnue per genre per year',figsize=(10, 6))
plt.show()

